package main

import (
	"fmt"
	"log"
	"os"
	"runtime"
	"strings"
	"time"
)

type customLogger struct {
	*log.Logger
	timeFormat string
}

func formatLineNumber(n int) string {
	return fmt.Sprintf("%04d", n)
}

func (c *customLogger) Output(calldepth int, s string) error {
	_, file, line, ok := runtime.Caller(calldepth)
	if !ok {
		file = "???"
		line = 0
	}

	lineNumber := formatLineNumber(line)
	fileLine := fmt.Sprintf("%s:%s", file, lineNumber)

	// Get the current time in the specified format
	now := time.Now().UTC().Format(c.timeFormat)

	return c.Logger.Output(calldepth, fmt.Sprintf("%s %s %s", now, strings.TrimSpace(fileLine), s))
}

func NewCustomLogger(out *os.File, prefix string, flag int, timeFormat string) *customLogger {
	return &customLogger{
		Logger:     log.New(out, prefix, flag),
		timeFormat: timeFormat,
	}
}

func main() {
	// Create a custom logger with Lshortfile flag and custom time format
	logger := NewCustomLogger(os.Stdout, "", log.Ldate|log.Ltime|log.Lmicroseconds, "2006-01-02 15:04:05")

	// Example log statements
	logger.Println("This is a sample log message.")
	logger.Println("Another log message.")
}
