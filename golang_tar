package main

import (
	"archive/tar"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"path/filepath"
)

func createTarGz(sourceDir, targetFile string) error {
	// Create the target file
	tarFile, err := os.Create(targetFile)
	if err != nil {
		return err
	}
	defer tarFile.Close()

	// Create a gzip writer
	gw := gzip.NewWriter(tarFile)
	defer gw.Close()

	// Create a tar writer
	tw := tar.NewWriter(gw)
	defer tw.Close()

	// Walk through the source directory and add files to the tar archive
	err = filepath.Walk(sourceDir, func(filePath string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Get the relative path for the file inside the tar archive
		relPath, err := filepath.Rel(sourceDir, filePath)
		if err != nil {
			return err
		}

		// Create a new tar header for the file
		header, err := tar.FileInfoHeader(info, relPath)
		if err != nil {
			return err
		}

		// Write the header to the tar archive
		if err := tw.WriteHeader(header); err != nil {
			return err
		}

		// If the file is not a directory, write its contents to the tar archive
		if !info.IsDir() {
			file, err := os.Open(filePath)
			if err != nil {
				return err
			}
			defer file.Close()

			_, err = io.Copy(tw, file)
			if err != nil {
				return err
			}
		}

		return nil
	})

	if err != nil {
		return err
	}

	fmt.Println("Tar archive created successfully.")
	return nil
}

func main() {
	sourceDir := "/path/to/source/dir"
	targetFile := "output.tar.gz"

	err := createTarGz(sourceDir, targetFile)
	if err != nil {
		fmt.Println("Error:", err)
	}
}
